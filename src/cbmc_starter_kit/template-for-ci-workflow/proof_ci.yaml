# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
name: Run CBMC proofs
on:
  push:
    branches-ignore:
      - gh-pages

# USAGE
#
# By default, the most recently released and available version will be used
# for CBMC, CBMC viewer, Litani and for the kissat, cadical SAT solvers.
#
# A semantic version can be specified for CBMC, CBMC viewer, Litani
# (e.g. '5.70.0' for CBMC, '3.6' for CBMC viewer, '1.27.0' for Litani).
# Known tags can be specified for kissat and cadical (e.g. 'rel-3.0.0' and
# 'rel-1.5.3' respectively).
#
# GITHUB_ACTIONS_RUNNER is the name of the GitHub-hosted runner (e.g. 'ubuntu-20.04')
# that will execute this workflow. THe runner must be on Ubuntu 20.04
# If your repository has large runners at its disposal, then the value for this
# key can be set to the name of your large runner. Find more details at:
# https://docs.github.com/en/actions/using-github-hosted-runners/using-larger-runners
#
# If you seek to use AWS to upload CI artifacts to S3 and to later view in your
# browser an HTML version of the CBMC proof report, then you need to provide
# values for:
#
# - AWS_CLOUDFRONT_DOMAIN can be something like 'd111111abcdef8.cloudfront.net'
# - AWS_REGION is set to 'us-east-1', but you can change this to the AWS region
#   in which the necessary AWS CloudFormation stacks have been deployed
# - AWS_ROLE_DURATION_SECONDS specifies the allotted time for which a session
#   will be valid for the IAM role that has been configured.


env:
  AWS_CLOUDFRONT_DOMAIN: <__AWS_CLOUDFRONT_DOMAIN__>
  AWS_REGION: us-east-1
  AWS_ROLE_DURATION_SECONDS: 3600
  CADICAL_TAG: <__CADICAL_TAG__>
  CBMC_VERSION: <__CBMC_VERSION__>
  CBMC_VIEWER_VERSION: <__CBMC_VIEWER_VERSION__>
  GITHUB_ACTIONS_RUNNER: <__GITHUB_ACTIONS_RUNNER__>
  KISSAT_TAG: <__KISSAT_TAG__>
  LITANI_VERSION: <__LITANI_VERSION__>
  PROOFS_DIR: <__PROOFS_DIR__>


jobs:
  run_cbmc_proofs:
    runs-on: <__GITHUB_ACTIONS_RUNNER__>
    name: run_cbmc_proofs
    permissions:
      contents: read
      id-token: write
      pull-requests: read
    steps:
      - name: Check out repository and submodules recursively
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Ensure CBMC, CBMC viewer, Litani versions have been specified
        id: ensure_versions
        if: ${{ env.CBMC_VERSION == '' || env.CBMC_VIEWER_VERSION == '' || env.LITANI_VERSION == '' }}
        shell: bash
        run: |
          should_exit=false
          if [ "${{ env.CBMC_VERSION }}" == "" ]; then
            echo "You must specify a CBMC version (e.g. 'latest' or '5.70.0')"
            should_exit=true
          fi
          if [ "${{ env.CBMC_VIEWER_VERSION }}" == "" ]; then
            echo "You must specify a CBMC viewer version (e.g. 'latest' or '3.6')"
            should_exit=true
          fi
          if [ "${{ env.LITANI_VERSION }}" == "" ]; then
            echo "You must specify a Litani version (e.g. 'latest' or '1.27.0')"
            should_exit=true
          fi
          if should_exit=true; then exit 1; fi
      - name: Install latest CBMC
        id: install_latest_cbmc
        if: ${{ env.CBMC_VERSION == 'latest' }}
        shell: bash
        run: |
          # Search within 5 most recent releases for latest available package
          CBMC_REL="https://api.github.com/repos/diffblue/cbmc/releases?page=1&per_page=5"
          CBMC_DEB=$(curl -s $CBMC_REL | jq -r '.[].assets[].browser_download_url' | grep -e 'ubuntu-20.04' | head -n 1)
          CBMC_ARTIFACT_NAME=$(basename $CBMC_DEB)
          curl -o $CBMC_ARTIFACT_NAME -L $CBMC_DEB
          sudo dpkg -i $CBMC_ARTIFACT_NAME
          rm ./$CBMC_ARTIFACT_NAME
          LATEST_CBMC_VERSION=$(basename $(echo $CBMC_DEB | sed  's/ubuntu-20.04-cbmc-//' | sed 's/-Linux.deb//'))
          echo "version=$LATEST_CBMC_VERSION" >> $GITHUB_OUTPUT
      - name: Install CBMC ${{ env.CBMC_VERSION }}
        id: install_cbmc_version
        if: ${{ env.CBMC_VERSION != 'latest' }}
        shell: bash
        run: |
          curl -o cbmc.deb -L \
            https://github.com/diffblue/cbmc/releases/download/cbmc-${{ env.CBMC_VERSION }}/ubuntu-20.04-cbmc-${{ env.CBMC_VERSION }}-Linux.deb
          sudo dpkg -i ./cbmc.deb
          rm ./cbmc.deb
          echo "version=${{ env.CBMC_VERSION }}" >> $GITHUB_OUTPUT
      - name: Install latest CBMC viewer
        id: install_latest_cbmc_viewer
        if: ${{ env.CBMC_VIEWER_VERSION == 'latest' }}
        shell: bash
        run: |
          CBMC_VIEWER_REL="https://api.github.com/repos/model-checking/cbmc-viewer/releases/latest"
          CBMC_VIEWER_VERSION=$(curl -s $CBMC_VIEWER_REL | jq -r .name | sed  's/viewer-//')
          pip3 install cbmc-viewer==$CBMC_VIEWER_VERSION
          echo "version=$CBMC_VIEWER_VERSION" >> $GITHUB_OUTPUT
      - name: Install CBMC viewer ${{ env.CBMC_VIEWER_VERSION }}
        id: install_cbmc_viewer_version
        if: ${{ env.CBMC_VIEWER_VERSION != 'latest' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends --yes \
            build-essential universal-ctags
          pip3 install cbmc-viewer==${{ env.CBMC_VIEWER_VERSION }}
          echo "version=${{ env.CBMC_VIEWER_VERSION }}" >> $GITHUB_OUTPUT
      - name: Install latest Litani
        id: install_latest_litani
        if: ${{ env.LITANI_VERSION == 'latest' }}
        shell: bash
        run: |
          # Search within 5 most recent releases for latest available package
          LITANI_REL="https://api.github.com/repos/awslabs/aws-build-accumulator/releases?page=1&per_page=5"
          LITANI_DEB=$(curl -s $LITANI_REL | jq -r '.[].assets[0].browser_download_url' | head -n 1)
          DBN_PKG_FILENAME=$(basename $LITANI_DEB)
          curl -L $LITANI_DEB -o $DBN_PKG_FILENAME
          sudo apt-get update
          sudo apt-get install --no-install-recommends --yes ./$DBN_PKG_FILENAME
          rm ./$DBN_PKG_FILENAME
          LATEST_LITANI_VERSION=$(basename $(echo $LITANI_DEB | sed  's/litani-//' | sed 's/.deb//'))
          echo "version=$LATEST_LITANI_VERSION" >> $GITHUB_OUTPUT
      - name: Install Litani ${{ env.LITANI_VERSION }}
        id: install_litani_version
        if: ${{ env.LITANI_VERSION != 'latest' }}
        shell: bash
        run: |
          curl -o litani.deb -L \
            https://github.com/awslabs/aws-build-accumulator/releases/download/${{ env.LITANI_VERSION }}/litani-${{ env.LITANI_VERSION }}.deb
          sudo apt-get update
          sudo apt-get install --no-install-recommends --yes ./litani.deb
          rm ./litani.deb
          echo "version=${{ env.LITANI_VERSION }}" >> $GITHUB_OUTPUT
      - name: Install ${{ env.KISSAT_TAG }} kissat
        id: install_kissat_version
        if: ${{ env.KISSAT_TAG != '' }}
        shell: bash
        run: |
          if ${{ env.KISSAT_TAG == 'latest' }}
          then
            KISSAT_REL="https://api.github.com/repos/arminbiere/kissat/releases/latest"
            KISSAT_TAG_NAME=$(curl -s $KISSAT_REL | jq -r '.tag_name')
          else
            KISSAT_TAG_NAME=${{ env.KISSAT_TAG }}
          fi
          echo "Installing kissat $KISSAT_TAG_NAME"
          git clone https://github.com/arminbiere/kissat.git \
            && cd kissat \
            && git checkout $KISSAT_TAG_NAME \
            && ./configure \
            && cd build \
            && make -j;
          echo "$(pwd)" >> $GITHUB_PATH
          echo "version=$KISSAT_TAG_NAME" >> $GITHUB_OUTPUT
      - name: Install ${{ env.CADICAL_TAG }} cadical
        id: install_cadical_version
        if: ${{ env.CADICAL_TAG != '' }}
        shell: bash
        run: |
          if ${{ env.CADICAL_TAG == 'latest' }}
          then
            CADICAL_REL="https://api.github.com/repos/arminbiere/cadical/releases/latest"
            CADICAL_TAG_NAME=$(curl -s $CADICAL_REL | jq -r '.tag_name')
          else
            CADICAL_TAG_NAME=${{ env.CADICAL_TAG }}
          fi
          echo "Installing cadical $CADICAL_TAG_NAME"
          git clone https://github.com/arminbiere/cadical.git \
            && cd cadical \
            && git checkout $CADICAL_TAG_NAME \
            && ./configure \
            && cd build \
            && make -j;
          echo "$(pwd)" >> $GITHUB_PATH
          echo "version=$CADICAL_TAG_NAME" >> $GITHUB_OUTPUT
      - name: List versions of installed tools
        id: list_cbmc_proof_tool_versions
        shell: bash
        run: |
          if [ -n "${{ steps.install_latest_cbmc.outputs.version }}" ]
          then
            echo "CBMC ${{ steps.install_latest_cbmc.outputs.version }}"
          else
            echo "CBMC ${{ steps.install_cbmc_version.outputs.version }}"
          fi
          if [ -n "${{ steps.install_latest_cbmc_viewer.outputs.version }}" ]
          then
            echo "CBMC viewer ${{ steps.install_latest_cbmc_viewer.outputs.version }}"
          else
            echo "CBMC viewer ${{ steps.install_cbmc_viewer_version.outputs.version }}"
          fi
          if [ -n "${{ steps.install_latest_litani.outputs.version }}" ]
          then
            echo "Litani ${{ steps.install_latest_litani.outputs.version }}"
          else
            echo "Litani ${{ steps.install_litani_version.outputs.version }}"
          fi
          if [ -n "${{ steps.install_kissat_version.outputs.version }}" ]
          then
            echo "kissat ${{ steps.install_kissat_version.outputs.version }}"
          fi
          if [ -n "${{ steps.install_cadical_version.outputs.version }}" ]
          then
            echo "cadical ${{ steps.install_cadical_version.outputs.version }}"
          fi
      - name: Run CBMC proofs
        id: run_cbmc_proofs
        shell: bash
        env:
          EXTERNAL_SAT_SOLVER: kissat
        working-directory: ${{ env.PROOFS_DIR }}
        run: ./run-cbmc-proofs.py
      - name: Set name for zip artifact with CBMC proof results
        id: artifact
        if: ${{ env.AWS_CLOUDFRONT_DOMAIN == '' }}
        run: |
          echo "name=cbmc_proof_results_${{ fromJson(toJson(github.event.repository)).name }}_$(date +%Y_%m_%d_%H_%M_%S)" >> $GITHUB_OUTPUT
      - name: Create zip artifact with CBMC proof results
        id: create_zip
        if: ${{ env.AWS_CLOUDFRONT_DOMAIN == '' }}
        shell: bash
        run: |
          FINAL_REPORT_DIR=$PROOFS_DIR/output/latest/html
          pushd $FINAL_REPORT_DIR \
            && zip -r ${{ steps.artifact.outputs.name }}.zip . \
            && popd \
            && mv $FINAL_REPORT_DIR/${{ steps.artifact.outputs.name }}.zip .
      - name: Upload zip artifact of CBMC proof results to GitHub Actions
        id: gh_upload
        if: ${{ env.AWS_CLOUDFRONT_DOMAIN == '' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: ${{ steps.artifact.outputs.name }}.zip
      - name: Set S3 URI
        id: s3_uri
        if: ${{ env.AWS_CLOUDFRONT_DOMAIN != '' }}
        run: echo "name=BuildArtifacts/${{ github.event.after }}/final" >> $GITHUB_OUTPUT
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        if: ${{ env.AWS_CLOUDFRONT_DOMAIN != '' }}
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: ${{ env.AWS_ROLE_DURATION_SECONDS }}
          role-session-name: cbmc_ci
          role-to-assume: ${{ secrets.PROOF_CI_IAM_ROLE }}
      - name: Upload CBMC proof results to S3
        id: aws_upload
        if: ${{ env.AWS_CLOUDFRONT_DOMAIN != '' }}
        shell: bash
        run: |
          aws s3 sync \
            $PROOFS_DIR/output/latest/html \
            s3://proof-ci-artifacts-${{ fromJson(toJson(github.event.repository)).id }}/${{ steps.s3_uri.outputs.name }} \
            --only-show-errors
      - name: CBMC proof results
        shell: bash
        run: |
          if [ -n "${{ env.AWS_CLOUDFRONT_DOMAIN }}" ]
          then
            python3 ${{ env.PROOFS_DIR }}/lib/summarize.py \
              --cloudfront-domain ${{ env.AWS_CLOUDFRONT_DOMAIN }} \
              --s3-uri ${{ steps.s3_uri.outputs.name }} \
              --run-file ${{ env.PROOFS_DIR }}/output/latest/html/run.json > summary.md
          else
            python3 ${{ env.PROOFS_DIR }}/lib/summarize.py \
              --run-file ${{ env.PROOFS_DIR }}/output/latest/html/run.json > summary.md
          fi
          cat summary.md >> $GITHUB_STEP_SUMMARY
          cat summary.md
          cat summary.md | [[ $(grep -cim1 -e "fail" -e "in progress") -eq 0 ]] ; echo $?
